# üìë MSME Business Intelligence - Report Export
# Developed by: Small Enterprises| 2025

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from datetime import datetime
import tempfile

# ----------------------------
# Page Configuration
# ----------------------------
st.set_page_config(page_title="MSME Reports & Export", page_icon="üìë", layout="wide")
st.title("üìë MSME BI - Professional Report Generator")
st.markdown("Generate your **interactive visual report** with automatic charts and KPIs for MSME business analysis.")

# ----------------------------
# Load Data from Dashboard
# ----------------------------
if "df" not in st.session_state:
    st.warning("‚ö†Ô∏è Please upload and analyze your data first on the **Dashboard** page.")
    st.stop()

df = st.session_state["df"]

# ----------------------------
# Data Preview
# ----------------------------
st.subheader("üìã Dataset Preview")
st.dataframe(df.head(), use_container_width=True)

numeric_cols = df.select_dtypes(include=["int64", "float64"]).columns
text_cols = df.select_dtypes(include=["object"]).columns

if numeric_cols.empty:
    st.error("‚ùå No numeric data found for visualization or report generation.")
    st.stop()

# ----------------------------
# Chart Selection
# ----------------------------
st.subheader("üé® Visualization Settings")
chart_type = st.selectbox("Select Chart Type", ["Bar Chart", "Line Chart", "Scatter Plot", "Donut Chart"], index=0)
x_axis = st.selectbox("Select X-axis", df.columns, index=0)
y_axis = st.selectbox("Select Y-axis", numeric_cols, index=0)

# ----------------------------
# Generate Chart
# ----------------------------
fig = None
if chart_type == "Bar Chart":
    fig = px.bar(df, x=x_axis, y=y_axis, color=x_axis, title=f"{y_axis} by {x_axis}")
elif chart_type == "Line Chart":
    fig = px.line(df, x=x_axis, y=y_axis, markers=True, title=f"{y_axis} Trend over {x_axis}")
elif chart_type == "Scatter Plot":
    fig = px.scatter(df, x=x_axis, y=y_axis, color=x_axis, size=y_axis, title=f"{y_axis} vs {x_axis}")
elif chart_type == "Donut Chart":
    fig = px.pie(df, names=x_axis, values=y_axis, hole=0.5, title=f"{y_axis} Distribution by {x_axis}")

if fig:
    st.plotly_chart(fig, use_container_width=True)

# ----------------------------
# PDF Report Generator
# ----------------------------
st.markdown("---")
st.subheader("üßæ Generate PDF Report")

report_title = "MSME Business Intelligence Report"
author_name = "Developed by Small Enterprises"

if st.button("üì• Generate & Download PDF"):
    with tempfile.TemporaryDirectory() as tmpdirname:
        # Save chart as image
        chart_path = f"{tmpdirname}/chart.png"
        fig.write_image(chart_path, format="png")

        # Create PDF buffer
        buffer = BytesIO()
        pdf = canvas.Canvas(buffer, pagesize=A4)
        width, height = A4

        # Header
        pdf.setFont("Helvetica-Bold", 16)
        pdf.drawString(50, height - 60, report_title)
        pdf.setFont("Helvetica", 10)
        pdf.drawString(50, height - 80, f"Generated on: {datetime.now().strftime('%d %B %Y, %I:%M %p')}")
        pdf.drawString(50, height - 95, author_name)

        # Add chart
        img = ImageReader(chart_path)
        pdf.drawImage(img, 50, height - 450, width=500, height=300, preserveAspectRatio=True)

        # Add Summary Statistics
        pdf.setFont("Helvetica-Bold", 12)
        pdf.drawString(50, height - 480, "üìä Summary Statistics:")
        pdf.setFont("Helvetica", 9)

        summary = df[numeric_cols].describe().round(2).to_string()
        y_pos = height - 495
        for line in summary.split("\n"):
            if y_pos < 80:
                pdf.showPage()
                y_pos = height - 60
            pdf.drawString(50, y_pos, line)
            y_pos -= 12

        # Add Insights
        y_pos -= 25
        pdf.setFont("Helvetica-Bold", 12)
        pdf.drawString(50, y_pos, "üí° Key Insights:")
        y_pos -= 15
        pdf.setFont("Helvetica", 9)

        for col in numeric_cols:
            avg = df[col].mean()
            maxv = df[col].max()
            minv = df[col].min()
            line = f"- {col}: Avg = {avg:.2f}, Max = {maxv:.2f}, Min = {minv:.2f}"
            if y_pos < 80:
                pdf.showPage()
                y_pos = height - 60
            pdf.drawString(50, y_pos, line)
            y_pos -= 12

        # Footer
        pdf.setFont("Helvetica-Oblique", 9)
        pdf.drawString(50, 40, "Generated by MSME BI Dashboard | ¬© 2025 Prince Arockyam")

        pdf.showPage()
        pdf.save()

        # Download Button
        st.download_button(
            label="üìÑ Download MSME Report (PDF)",
            data=buffer.getvalue(),
            file_name="MSME_BI_Report.pdf",
            mime="application/pdf"
        )

    st.success("‚úÖ Your report has been generated successfully!")

st.info("Tip: Choose your chart type above, then click **Generate PDF** to get a complete report with visuals and insights.")
